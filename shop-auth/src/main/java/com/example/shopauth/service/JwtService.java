// src/main/java/com/example/shopauth/service/JwtService.java
package com.example.shopauth.service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import lombok.Getter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import javax.crypto.SecretKey;
import java.util.*;
import java.util.stream.Collectors;

import static io.jsonwebtoken.io.Decoders.BASE64;

@Service
public class JwtService {

    private final SecretKey secretKey;
    private final long accessTokenMs;
    // Getter cho refresh token TTL
    @Getter
    private final long refreshTokenMs;

    public JwtService(
            @Value("${app.jwt.secret}")  String secret,
            @Value("${app.jwt.access-ms:900000}") long accessTokenMs,
            @Value("${app.jwt.refresh-ms:604800000}") long refreshTokenMs
    ) {
        if (secret == null || secret.isBlank()) {
            throw new IllegalStateException("JWT secret is not configured.");
        }
        // t·∫°o chu·ªói BASE 64 cho secret, g·∫Øn th·ªùi gian cho accessToken, refreshToken
        byte[] keyBytes = BASE64.decode(secret);
        this.secretKey = Keys.hmacShaKeyFor(keyBytes);
        this.accessTokenMs = accessTokenMs;
        this.refreshTokenMs = refreshTokenMs;
    }

    public String generateAccessToken(CustomUserDetails userDetails) {

        Map<String, Object> claims = new HashMap<>();

        claims.put("email", userDetails.getEmail()); // üëà th√™m email v√†o claim

        claims.put("id", userDetails.getId()); // üëà th√™m id v√†o claim

        List<String> roles = userDetails.getAuthorities().stream()
                .map(GrantedAuthority::getAuthority).collect(Collectors.toList());

        claims.put("roles", roles); // üëà th√™m role v√†o claim

        return buildToken(claims, userDetails.getUsername(), accessTokenMs);
    }

    public Long extractUserId(String token) {
        return parseClaims(token).get("id", Long.class);
    }

    public String extractEmail(String token) {
        return parseClaims(token).get("email", String.class);
    }

    public List<String> extractRoles(String token) {
        // L·∫•y claim "roles" t·ª´ payload trong JWT (c√≥ th·ªÉ l√† b·∫•t c·ª© ki·ªÉu g√¨ ‚Üí Object)
        Object raw = parseClaims(token).get("roles");

        // Ki·ªÉm tra n·∫øu raw th·ª±c s·ª± l√† m·ªôt List (danh s√°ch)
        // List<?> nghƒ©a l√† "List ch·ª©a ph·∫ßn t·ª≠ ki·ªÉu b·∫•t k·ª≥" (ch∆∞a bi·∫øt r√µ ki·ªÉu b√™n trong)
        if (raw instanceof List<?> rawList) {
            // Duy·ªát qua t·ª´ng ph·∫ßn t·ª≠ trong List (m·ªói ph·∫ßn t·ª≠ c√≥ th·ªÉ l√† Object)
            // map(Object::toString) ‚Üí √©p t·ª´ng ph·∫ßn t·ª≠ th√†nh chu·ªói (String)
            return rawList.stream()
                    .map(Object::toString)
                    .toList(); // Tr·∫£ v·ªÅ List<String> cu·ªëi c√πng
        }

        // N·∫øu claim "roles" kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ph·∫£i List ‚Üí tr·∫£ v·ªÅ List r·ªóng
        return Collections.emptyList();
    }



    public String generateRefreshToken(UserDetails userDetails) {
        return buildToken(Collections.emptyMap(), userDetails.getUsername(), refreshTokenMs);
    }

    private String buildToken(Map<String, Object> extraClaims, String subject, long ttlMs) {
        Date now = new Date();
        Date exp = new Date(now.getTime() + ttlMs);
        return Jwts.builder()
                .claims(extraClaims)
                .subject(subject)
                .issuedAt(Date.from(now.toInstant()))
                .expiration(Date.from(exp.toInstant()))
                .signWith(secretKey, Jwts.SIG.HS256)  // <<< d√≤ng n√†y m·ªõi t·∫°o ch·ªØ k√Ω !!!
                .compact();
    }

    public boolean isTokenValid(String token, UserDetails userDetails) {
        try {
            String username = extractUsername(token);
            return username.equals(userDetails.getUsername()) && !isTokenExpired(token);
        } catch (JwtException | IllegalArgumentException e) {
            return false;
        }
    }

    public String extractUsername(String token) {
        return parseClaims(token).getSubject();
    }

    public boolean isTokenExpired(String token) {
        Date exp = Date.from(parseClaims(token).getExpiration().toInstant());
        return exp.before(new Date());
    }

    // D√ông ƒë·ªÉ x√°c th·ª±c ch·ªØ k√Ω v√† gi·∫£i m√£ payload c·ªßa JWT token
    private Claims parseClaims(String token) {
        return Jwts.parser()                 // ‚ûä t·∫°o builder cho JwtParser
                .verifyWith(secretKey)             // ‚ûã c·∫•u h√¨nh kh√≥a b√≠ m·∫≠t ƒë·ªÉ VERIFY ch·ªØ k√Ω
                .build()                           // ‚ûå build ra JwtParser
                .parseSignedClaims(token)          // ‚ûç parse + verify token "xxx.yyy.zzz"
                .getPayload();                     // ‚ûé l·∫•y ph·∫ßn Payload (Claims)
    }


}
